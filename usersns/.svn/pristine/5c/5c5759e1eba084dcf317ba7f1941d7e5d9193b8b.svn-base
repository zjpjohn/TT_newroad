<?xml version="1.0" encoding="UTF-8" ?>   
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="friend">

	<resultMap id="friend" type="com.newroad.user.sns.model.friend.Friend">
		<result column="friendID" 			property="friendID"/>
		<result column="userID" 			property="userID"/>
		<result column="userType" 			property="userType"/>
		<result column="nickName" 			property="nickName"/>
		<result column="gender" 			property="gender"/>
		<result column="description" 		property="description"/>
		<result column="photo" 				property="photo"/>
		<result column="lastLoginTime" 		property="lastLoginTime"/>
		<result column="lastOperateTime" 	property="lastOperateTime"/>
	</resultMap>
	
	<resultMap id="groupFriend" type="com.newroad.user.sns.model.friend.Friend">
		<result column="friendID" 			property="friendID"/>
		<result column="userID" 			property="userID"/>
		<result column="groupID" 			property="groupID"/>
		<result column="userType" 			property="userType"/>
		<result column="nickName" 			property="nickName"/>
		<result column="gender" 			property="gender"/>
		<result column="description" 		property="description"/>
		<result column="photo" 				property="photo"/>
		<result column="lastLoginTime" 		property="lastLoginTime"/>
		<result column="lastOperateTime" 	property="lastOperateTime"/>
	</resultMap>
	
	<resultMap id="friendApply" type="com.newroad.user.sns.model.friend.FriendApply">
		<result column="id" 				property="applyID"/>
		<result column="userID" 			property="userID"/>
		<result column="type" 				property="type"/>
		<result column="account" 			property="account"/>
		<result column="status" 			property="status"/>
		<result column="requestTime" 		property="requestTime"/>
		<result column="responseTime" 		property="responseTime"/>
	</resultMap>

	<resultMap id="friendGroup" type="com.newroad.user.sns.model.friend.FriendGroup">
		<result column="id" 				property="friendGroupID"/>
		<result column="userID" 			property="userID"/>
		<result column="name" 				property="name"/>
		<result column="createTime" 		property="createTime"/>
	</resultMap>

	<!-- 好友列表 -->
	<sql id="findUserFriendListSQL" >
		select sf.id friendID, sf.userID1 userID, su.* 
		from sns_friend sf, sns_user su 
		where su.status=0 and sf.status = 0
		     and sf.userID1 = su.id
		     and sf.userID2 = #{userID}
		union
		select sf.id friendID, sf.userID2 userID, su.* 
		from sns_friend sf, sns_user su 
		where su.status=0 and sf.status = 0
		     and sf.userID2 = su.id
		     and sf.userID1 = #{userID}
	</sql>
    <select id="findUserFriendList_cnt" resultType="java.lang.Integer">
        <include refid="common.pageCountBegin" />
        <include refid="findUserFriendListSQL"/>
        <include refid="common.pageCountEnd" />
    </select>	
    <select id="findUserFriendList" parameterType="java.util.Map" resultMap="friend">
        <include refid="common.pageBegin" />
        <include refid="findUserFriendListSQL"/>
        <include refid="common.pageEnd" />
    </select>
	
	<!-- 查询用户好友 -->
	<select id="getUserFriend" parameterType="java.util.Map" resultMap="friend">
		select sf.id friendID, sf.userID2 userID, su.* 
		from sns_friend sf, sns_user su 
		where su.status=0 and sf.status = 0
		     and sf.userID1 = su.id
		     and sf.userID1 = #{userID} 
		     and sf.userID2 = #{friendID}
		union 
		select sf.id friendID, sf.userID1 userID, su.* 
		from sns_friend sf, sns_user su 
		where su.status=0 and sf.status = 0
		     and sf.userID2 = su.id
		     and sf.userID2 = #{userID} 
		     and sf.userID1 = #{friendID}
	</select>
	
	<!-- 查询好友记录 -->
	<select id="getUserFriendByID" parameterType="java.lang.Long" resultMap="friend">
		select sf.id friendID, sf.userID2 userID, su.* 
		from sns_friend sf, sns_user su 
		where su.status=0 and sf.status = 0
		     and sf.userID1 = su.id
		     and sf.id = #{value}		
	</select>
	
	<!-- 查询好友申请记录 -->
	<select id="getFriendApply" parameterType="java.util.Map" resultMap="friendApply">
		select * from sns_friend_req 
		where userID=#{userID} 
		    and type=0
		    and account=#{friendID} 
	</select>
	
	<!-- 查询好友申请记录 根据申请ID -->
	<select id="getFriendApplyByID" parameterType="java.lang.Long" resultMap="friendApply">
		select * from sns_friend_req 
		where id=#{value}
	</select>
	
	<!-- 好友申请列表 -->
	<sql id="findUserApplyListSQL">
		select * from sns_friend_req 
		where type=0
		    and account=#{userID}
	</sql>
	<select id="findUserApplyList_cnt" resultType="java.lang.Integer">
        <include refid="common.pageCountBegin"/>
        <include refid="findUserApplyListSQL"/>
        <include refid="common.pageCountEnd"/>
    </select>	
    <select id="findUserApplyList" parameterType="java.util.Map" resultMap="friendApply">
        <include refid="common.pageBegin" />
        <include refid="findUserApplyListSQL"/>
        <include refid="common.pageEnd" />
    </select>
	
	<!--  保存好友申请 -->
	<insert id="saveUserFriendApply" parameterType="java.util.Map">
		insert into sns_friend_req(userID, type, account, status, requestTime)
		values (#{userID}, 0, #{friendID}, 0, now())
	</insert>
	
	<!-- 查询好友邀请记录 -->
	<select id="getFriendInvite" parameterType="java.util.Map" resultMap="friendApply">
		select * from sns_friend_req 
		where userID=#{userID} 
		    and type=#{type}
		    and account=#{account} 
	</select>
	
	<!--  保存好友邀请 -->
	<insert id="saveUserFriendInvite" parameterType="java.util.Map">
		insert into sns_friend_req(userID, type, account, status, requestTime)
		values (#{userID}, #{type}, #{account}, 0, now())
		<selectKey resultType="java.lang.Long" keyProperty="id">
			select LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 同意好友申请 -->
	<update id="agreeFriendApply" parameterType="java.util.Map">
		update sns_friend_req set status=1 where id=#{applyID}
	</update>
	
	<!-- 拒绝好友申请 -->
	<update id="rejectFriendApply" parameterType="java.util.Map">
		update sns_friend_req set status=-1 where id=#{applyID}
	</update>
	
	<!-- 添加好友记录 -->
	<insert id="addUserFriend" parameterType="java.util.Map">
		insert into sns_friend(userID1, userID2, status, startTime)
		value(#{userID}, #{friendID}, 0, now())
	</insert>
	
	<!-- 删除好友 -->
	<update id="deleteUserFriend" parameterType="java.util.Map">
		update sns_friend set status=1, endTime=now()
		where (
		          (userID1=#{userID} and userID2=#{friendID})
		      or
		          (userID2=#{userID} and userID1=#{friendID})
		      )
	</update>
	
	<!-- 好友分组列表 -->
	<select id="findUserFriendGroupList" parameterType="java.lang.Long" resultMap="friendGroup">
		select * from sns_friend_group where status=0 and userID=#{value}
	</select>
	
	<!-- 好友分组详细信息 -->
	<select id="getUserFriendGroup" parameterType="java.util.Map" resultMap="friendGroup">
		select * from sns_friend_group where status=0 and id=#{friendGroupID}
	</select>
	
	<!-- 根据分组名查询好友分组 -->
	<select id="getUserFriendGroupByName" parameterType="java.lang.String" resultMap="friendGroup">
		select * from sns_friend_group where status=0 and name=#{value}
	</select>
	
	<!-- 添加好友分组 -->
	<insert id="saveFriendGroup" parameterType="com.newroad.user.sns.model.friend.FriendGroup">
		insert into sns_friend_group(userID, name, status ,createTime)
		values (#{userID}, #{name}, 0, now())
		<selectKey resultType="java.lang.Long" keyProperty="friendGroupID">
			select LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 修改好友分组 -->
	<update id="updateFriendGroup" parameterType="java.util.Map">
		update sns_friend_group set name=#{name} where id=#{friendGroupID}
	</update>
	
	<!-- 删除好友分组 -->
	<update id="deleteFriendGroup" parameterType="java.util.Map">
		update sns_friend_group set status=1 where id=#{friendGroupID}
	</update>
	
	<!-- 添加分组好友 -->
	<insert id="saveFriendGroupUser" parameterType="java.util.Map">
		insert into sns_friend_group_user(groupID, friendID, userID, status, createTime)
		values (#{friendGroupID}, #{friendID}, #{userID}, 0, now())
	</insert>
	
	<!-- 删除分组内的好友 -->
	<update id="deleteFriendGroupUser" parameterType="java.util.Map">
		update sns_friend_group_user set status=1 
		where userID=#{userID} and groupID=#{friendGroupID}
	</update>
	
	<!-- 批量删除分组好友 -->
	<update id="batchDeleteFriendGroupUser" parameterType="java.util.Map">
		update sns_friend_group_user set status=1 
		where userID=#{userID}
		    and friendID in
		    <foreach collection="friends" item="item" open="(" close=")" separator=",">
		    	#{item}
		    </foreach>
	</update>
	
	<!-- 查询分组好友列表 -->
	<select id="findFriendGroupUserList" parameterType="java.util.Map" resultMap="groupFriend">
		select sf.id friendID, sf.userID1 userID, sfgu.groupID, su.*
		from sns_friend_group_user sfgu, sns_friend sf, sns_user su 
		where sfgu.friendID = sf.id 
		    and sf.userID1 = su.id
		    and sfgu.status = 0
		    and su.status = 0
		    and sf.userID2 = #{userID}
		    and sfgu.groupID=#{friendGroupID}
		union
		select sf.id friendID, sf.userID2 userID, sfgu.groupID, su.*
		from sns_friend_group_user sfgu, sns_friend sf, sns_user su 
		where sfgu.friendID = sf.id 
		    and sf.userID2 = su.id
		    and sfgu.status = 0
		    and su.status = 0
		    and sf.userID1 = #{userID}
		    and sfgu.groupID=#{friendGroupID}  
	</select>
</mapper>   