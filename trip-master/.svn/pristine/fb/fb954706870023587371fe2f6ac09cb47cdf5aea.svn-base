package com.newroad.tripmaster.dao;

import java.util.List;

import org.bson.types.ObjectId;
import org.mongodb.morphia.Datastore;
import org.mongodb.morphia.Key;
import org.mongodb.morphia.dao.BasicDAO;
import org.mongodb.morphia.mapping.Mapper;
import org.mongodb.morphia.query.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.constant.QueryConstant;
import com.newroad.tripmaster.dao.pojo.trip.TripProduct;

public class TripProductDao extends BasicDAO<TripProduct, ObjectId> {

  private static Logger logger = LoggerFactory.getLogger(TripProductDao.class);

  protected TripProductDao(Datastore ds) {
    super(ds);
    // TODO Auto-generated constructor stub
  }

  public Object saveTripProduct(TripProduct tripProduct) {
    Key<TripProduct> key = getDs().save(tripProduct);
    return key.getId();
  }

  public List<TripProduct> listTripProducts(Integer cityCode) {
    Query<TripProduct> productQueryArray = null;
    if (cityCode != null) {
      productQueryArray = getDs().find(TripProduct.class).field(DataConstant.START_CITY).equal(cityCode).limit(QueryConstant.QUERY_LIMIT);
    } else {
      productQueryArray = getDs().find(TripProduct.class).limit(QueryConstant.QUERY_LIMIT);
    }
    List<TripProduct> productList = productQueryArray.asList();
    return productList;
  }

  public List<TripProduct> listTripProductByUser(Long luckerId) {
    Query<TripProduct> productQueryArray = null;
    List<TripProduct> productList=null;
    if (luckerId != null&&luckerId>0) {
      productQueryArray = getDs().find(TripProduct.class).field(DataConstant.LUCKER_ID).equal(luckerId).limit(QueryConstant.QUERY_LIMIT);
      productList = productQueryArray.asList();
    } 
    return productList;
  }
  
  public TripProduct getTripProduct(String productId) {
    ObjectId objId=new ObjectId(productId);
    Query<TripProduct> productQuery =null;
    productQuery = getDs().find(TripProduct.class).field(Mapper.ID_KEY).equal(objId);
    TripProduct tripProduct = productQuery.get();
    return tripProduct;
  }

  
}
