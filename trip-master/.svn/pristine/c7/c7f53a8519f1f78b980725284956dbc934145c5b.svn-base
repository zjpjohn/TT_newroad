package com.newroad.tripmaster.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.constant.HttpConstant;
import com.newroad.tripmaster.constant.JSONConvertor;
import com.newroad.tripmaster.dao.pojo.trip.CustomizeRoute;
import com.newroad.tripmaster.dao.pojo.trip.POIRoute;
import com.newroad.tripmaster.dao.pojo.trip.TravelPOI;
import com.newroad.tripmaster.dao.pojo.trip.TripProduct;
import com.newroad.tripmaster.filter.TokenAuthFilter;
import com.newroad.tripmaster.service.ProductDesignServiceIf;
import com.newroad.util.StringHelper;
import com.newroad.util.apiresult.ApiReturnObjectUtil;

@Controller
@RequestMapping("/v{apiVersion}/design")
public class ProductDesignController {

  private static Logger logger = LoggerFactory.getLogger(ProductDesignController.class);

  @Autowired
  private ProductDesignServiceIf productDesignService;

  /**
   * save designed trip product
   */
  @RequestMapping(value = "/product/create", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String createTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    Long userId = TokenAuthFilter.getCurrentUser();
    if (userId == null || userId == 0L) {
      return null;
    }
    TripProduct tripProduct = JSONConvertor.getJSONInstance().fromJson(reqParam, TripProduct.class);
    tripProduct.setLuckerId(userId);
    return productDesignService.createTripProduct(tripProduct).toString();
  }

  /**
   * update designed trip product
   */
  @RequestMapping(value = "/product/update", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    map.remove(DataConstant.TRIP_PRODUCT_ID);
    return productDesignService.updateTripProduct(tripProductId, map).toString();
  }

  /**
   * delete designed trip product
   */
  @RequestMapping(value = "/product/delete", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String deleteTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    return productDesignService.deleteTripProduct(tripProductId).toString();
  }

  /**
   * submit designed trip product
   */
  @RequestMapping(value = "/product/submit", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String submitTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    return productDesignService.submitTripProduct(tripProductId).toString();
  }

  /**
   * trip product list by user
   */
  @RequestMapping(value = "/product/detail", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String detailUserTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    Long lucker = null;
    Integer luckerId = (Integer) map.get(DataConstant.LUCKER_ID);
    if (luckerId == null) {
      Long userId = TokenAuthFilter.getCurrentUser();
      if (userId == null || userId == 0L) {
        return null;
      }
    } else {
      lucker = luckerId.longValue();
    }
    String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    return productDesignService.detailUserTripProduct(lucker, tripProductId).toString();
  }

  /**
   * trip product list by user
   */
  @RequestMapping(value = "/product/list", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String listUserTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    Long lucker = null;
    Integer luckerId = (Integer) map.get(DataConstant.LUCKER_ID);
    if (luckerId == null) {
      Long userId = TokenAuthFilter.getCurrentUser();
      if (userId == null || userId == 0L) {
        return null;
      }
    } else {
      lucker = luckerId.longValue();
    }
    return productDesignService.listUserTripProduct(lucker).toString();
  }

  /**
   * trip product list by user
   */
  @RequestMapping(value = "/route/list", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String listUserTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    Long userId = TokenAuthFilter.getCurrentUser();
    if (userId == null || userId == 0L) {
      return null;
    }
    return productDesignService.listUserTripRoute(userId).toString();
  }

  /**
   * create designed trip route
   */
  @RequestMapping(value = "/route/create", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String createTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    CustomizeRoute tripRoute = JSONConvertor.getJSONInstance().fromJson(reqParam, CustomizeRoute.class);
    return productDesignService.createCustomizeRoute(tripRoute).toString();
  }

  /**
   * submit designed trip route
   */
  @RequestMapping(value = "/route/update", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
    map.remove(DataConstant.TRIP_ROUTE_ID);
    return productDesignService.updateCustomizeRoute(tripRouteId, map).toString();
  }

  /**
   * submit designed trip route
   */
  @RequestMapping(value = "/route/delete", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String deleteTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
    return productDesignService.deleteCustomizeRoute(tripRouteId).toString();
  }

  /**
   * save designed trip route
   */
  @RequestMapping(value = "/city/list", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String listTripCity(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String cityCode = (String) map.get(DataConstant.CITY_CODE);
    Integer type = (Integer) map.get(DataConstant.CITY_TYPE);
    return productDesignService.listCity(cityCode, type).toString();
  }


  /**
   * save designed trip poi route
   */
  @RequestMapping(value = "/poiroute/create", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String createTripPOIRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    POIRoute poiRoute = JSONConvertor.getJSONInstance().fromJson(reqParam, POIRoute.class);
    return productDesignService.createTripPOIRoute(poiRoute).toString();
  }

  /**
   * save designed trip poi route
   */
  @RequestMapping(value = "/poiroute/update", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateTripPOIRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String poiRouteId = (String) map.get(DataConstant.POI_ROUTE_ID);
    map.remove(DataConstant.POI_ROUTE_ID);
    return productDesignService.updateTripPOIRoute(poiRouteId, map).toString();
  }

  /**
   * save designed trip poi route
   */
  @RequestMapping(value = "/poiroute/delete", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String deleteTripPOIRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String poiRouteId = (String) map.get(DataConstant.POI_ROUTE_ID);
    return productDesignService.deleteTripPOIRoute(poiRouteId).toString();
  }


  /**
   * save designed trip product
   */
  @RequestMapping(value = "/travelpoi/add", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String addTravelPOI(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    TravelPOI travelPOI = JSONConvertor.getJSONInstance().fromJson(reqParam, TravelPOI.class);
    return productDesignService.createTravelUserPOI(travelPOI).toString();
  }
}
