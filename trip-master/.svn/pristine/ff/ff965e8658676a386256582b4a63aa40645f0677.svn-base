package com.newroad.tripmaster.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.constant.HttpConstant;
import com.newroad.tripmaster.constant.JSONConvertor;
import com.newroad.tripmaster.filter.TokenAuthFilter;
import com.newroad.tripmaster.service.ProductOrderServiceIf;
import com.newroad.util.StringHelper;
import com.newroad.util.apiresult.ApiReturnObjectUtil;

@Controller
@RequestMapping("/v{apiVersion}/order")
public class ProductOrderController {

  private static Logger logger = LoggerFactory.getLogger(ProductOrderController.class);

  @Autowired
  private ProductOrderServiceIf productOrderService;
  
  /**
   * update designed trip product
   */
  @RequestMapping(value = "/view", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String viewProductOrder(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    Long userId = TokenAuthFilter.getCurrentUser();
    if (userId == null || userId == 0L) {
      return null;
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String productOrderId = (String) map.get(DataConstant.PRODUCT_ORDER_ID);
    return productOrderService.viewProductOrder(productOrderId).toString();
  }
  
  /**
   * update designed trip product
   */
  @RequestMapping(value = "/update", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateProductOrderByUser(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String productOrderId = (String) map.get(DataConstant.PRODUCT_ORDER_ID);
    Integer updateAuthority =(Integer) map.get(DataConstant.UPDATE_AUTHORITY);
    String serviceResult=null;
    switch(updateAuthority){
      case 1:
        serviceResult=productOrderService.updateProductOrderByUser(productOrderId, map).toString();
        break;
      case 2:
        serviceResult=productOrderService.updateProductOrderByLucker(productOrderId, map).toString();
        break;
    }
    return serviceResult;
  }
  
}
