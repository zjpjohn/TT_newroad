package com.newroad.tripmaster.service.scenic;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.constant.JSONConvertor;
import com.newroad.tripmaster.dao.CustomizeRouteDao;
import com.newroad.tripmaster.dao.TravelPOIDao;
import com.newroad.tripmaster.dao.TripPOIRouteDao;
import com.newroad.tripmaster.dao.TripProductDao;
import com.newroad.tripmaster.dao.pojo.trip.CustomizeRoute;
import com.newroad.tripmaster.dao.pojo.trip.POIRoute;
import com.newroad.tripmaster.dao.pojo.trip.TravelPOI;
import com.newroad.tripmaster.dao.pojo.trip.TripProduct;
import com.newroad.tripmaster.service.ProductDesignServiceIf;
import com.newroad.util.apiresult.ReturnCode;
import com.newroad.util.apiresult.ServiceResult;

public class ProductDesignService implements ProductDesignServiceIf {

  private static Logger logger = LoggerFactory.getLogger(ProductDesignService.class);

  private TripProductDao tripProductDao;

  private TripPOIRouteDao tripPOIRouteDao;

  private CustomizeRouteDao customizeRouteDao;

  private TravelPOIDao travelPOIDao;


  public ServiceResult<String> createTripProduct(TripProduct tripProduct) {
    ServiceResult<String> result = new ServiceResult<String>();
    long currentTime = System.currentTimeMillis();
    tripProduct.setCreateTime(currentTime);
    tripProduct.setUpdateTime(currentTime);
    tripProduct.setStatus(3);

    Object idObj = tripProductDao.saveTripProduct(tripProduct);
    logger.info("TripProduct create objectId:" + idObj);
    if (idObj == null) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to create trip product because ObjectId is null!");
      return result;
    }
    String tripProductId = idObj.toString();
    Map<String, Object> tripRouteMap = createCustomizeRoute(new CustomizeRoute(tripProduct.getProductName(), tripProduct.getLuckerId()));
    if (tripRouteMap == null) {
      logger.error("Fail to create trip route because tripRouteId is null!");
    } else {
      updateTripProduct(tripProductId, tripRouteMap);
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_PRODUCT_ID, tripProductId);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  public ServiceResult<String> updateTripProduct(String tripProductId, Map<String, Object> updateActionMap) {
    ServiceResult<String> result = new ServiceResult<String>();
    long currentTime = System.currentTimeMillis();
    updateActionMap.put(DataConstant.UPDATE_TIME, currentTime);
    // tripProduct.setUpdateTime(currentTime);

    int updateCount = tripProductDao.updateTripProduct(tripProductId, updateActionMap);
    logger.info("Update TripProduct objectId count:" + updateCount);
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to update trip product because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_PRODUCT_ID, tripProductId);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  public ServiceResult<String> deleteTripProduct(String tripProductId) {
    ServiceResult<String> result = new ServiceResult<String>();
    Map<String, Object> updateActionMap = new HashMap<String, Object>();
    long currentTime = System.currentTimeMillis();
    updateActionMap.put(DataConstant.UPDATE_TIME, currentTime);
    updateActionMap.put(DataConstant.STATUS, 0);

    int updateCount = tripProductDao.updateTripProduct(tripProductId, updateActionMap);
    logger.info("Delete TripProduct objectId count:" + updateCount + " status=0(unusable)");
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to delete trip product because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_PRODUCT_ID, tripProductId);
    map.put(DataConstant.STATUS, 0);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  public ServiceResult<String> updateTripProductStatus(String tripProductId, Integer status) {
    ServiceResult<String> result = new ServiceResult<String>();
    Map<String, Object> updateActionMap = new HashMap<String, Object>();
    long currentTime = System.currentTimeMillis();
    updateActionMap.put(DataConstant.UPDATE_TIME, currentTime);
    updateActionMap.put(DataConstant.STATUS, status);

    int updateCount = tripProductDao.updateTripProduct(tripProductId, updateActionMap);
    logger.info("Submit TripProduct objectId count:" + updateCount + " status=" + status);
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to submit trip product because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_PRODUCT_ID, tripProductId);
    map.put(DataConstant.STATUS, status);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  public ServiceResult<String> listUserTripProduct(Long luckerId, Integer start, Integer size) {
    ServiceResult<String> result = new ServiceResult<String>();
    String jsonResult = null;
    List<TripProduct> tripProductList = tripProductDao.listTripProductByUser(luckerId, start, size);
    Long productCount = tripProductDao.countTripProduct(luckerId);
    jsonResult = JSONConvertor.transformTripProducts2JSON(tripProductList, productCount);
    logger.info("Trip Product list:" + jsonResult);
    result.setBusinessResult(jsonResult);
    return result;
  }

  @Override
  public ServiceResult<String> listUserTripRoute(Long luckerId) {
    // TODO Auto-generated method stub
    return null;
  }

  public Map<String, Object> createCustomizeRoute(CustomizeRoute tripRoute) {
    long currentTime = System.currentTimeMillis();
    tripRoute.setCreateTime(currentTime);
    tripRoute.setUpdateTime(currentTime);

    Object idObj = customizeRouteDao.saveCustomizeRoute(tripRoute);
    logger.info("CustomizeRoute object id:" + idObj);
    if (idObj == null) {
      return null;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_ROUTE_ID, idObj.toString());
    return map;
  }

  public ServiceResult<String> updateCustomizeRoute(String tripRouteId, Map<String, Object> updateActionMap) {
    ServiceResult<String> result = new ServiceResult<String>();
    long currentTime = System.currentTimeMillis();
    updateActionMap.put(DataConstant.UPDATE_TIME, currentTime);

    int updateCount = customizeRouteDao.updateCustomizeRoute(tripRouteId, updateActionMap);
    logger.info("Update CustomizeRoute objectId count:" + updateCount);
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to update customize route because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_ROUTE_ID, tripRouteId);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  public ServiceResult<String> deleteCustomizeRoute(String tripRouteId) {
    ServiceResult<String> result = new ServiceResult<String>();

    int updateCount = customizeRouteDao.updateTripRouteStatus(tripRouteId, 0);
    logger.info("Delete CustomizeRoute objectId count:" + updateCount + " status=0(unusable)");
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to delete customize route because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_ROUTE_ID, tripRouteId);
    map.put(DataConstant.STATUS, 0);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  // public ServiceResult<String> detailCustomizeRoute(String tripRouteId) {
  // ServiceResult<String> result = new ServiceResult<String>();
  // String jsonResult = null;
  // CustomizeRoute tripRoute = customizeRouteDao.getCustomizeRoute(tripRouteId);
  // Map<String, Object> map = new HashMap<String, Object>();
  // map.put(DataConstant.CUSTOMIZE_ROUTE, tripRoute);
  // jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
  // logger.info("Trip Route detail:" + jsonResult);
  // result.setBusinessResult(jsonResult);
  // return result;
  // }
  //
  // @Override
  // public ServiceResult<String> detailCustomizeDayRoute(String tripRouteId, String routeDay) {
  // // TODO Auto-generated method stub
  // return null;
  // }

  public ServiceResult<String> createTripPOIRoute(POIRoute poiRoute) {
    ServiceResult<String> result = new ServiceResult<String>();
    long currentTime = System.currentTimeMillis();
    poiRoute.setCreateTime(currentTime);
    poiRoute.setUpdateTime(currentTime);

    Object idObj = tripPOIRouteDao.saveTripPOIRoute(poiRoute);
    logger.info("TripPOIRoute object id:" + idObj);
    if (idObj == null) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to create trip POI route because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.POI_ROUTE_ID, idObj.toString());
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  public ServiceResult<String> updateTripPOIRoute(String poiRouteId, Map<String, Object> updateActionMap) {
    ServiceResult<String> result = new ServiceResult<String>();
    long currentTime = System.currentTimeMillis();
    updateActionMap.put(DataConstant.UPDATE_TIME, currentTime);
    // tripProduct.setUpdateTime(currentTime);

    int updateCount = tripPOIRouteDao.updatePOIRoute(poiRouteId, updateActionMap);
    logger.info("Update TripPOIRoute objectId count:" + updateCount);
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to update trip POI route because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.POI_ROUTE_ID, poiRouteId);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  public ServiceResult<String> deleteTripPOIRoute(String poiRouteId) {
    ServiceResult<String> result = new ServiceResult<String>();

    int updateCount = tripPOIRouteDao.updatePOIRouteStatus(poiRouteId, 0);
    logger.info("Update TripPOIRoute objectId count:" + updateCount + " status=0(unusable)");
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to delete trip POI route because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.POI_ROUTE_ID, poiRouteId);
    map.put(DataConstant.STATUS, 0);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  @Override
  public ServiceResult<String> updateDayRouteInfo(String tripRouteId, String routeDay, String dayRouteTitle) {
    ServiceResult<String> result = new ServiceResult<String>();
    Map<String, Object> updateActionMap = new HashMap<String, Object>();
    updateActionMap.put(routeDay, dayRouteTitle);

    int updateCount = customizeRouteDao.pushCustomizeRoute(tripRouteId, DataConstant.DAY_ROUTE_MAP, updateActionMap);
    logger.info("Update CustomizeRoute dayRouteMap objectId count:" + updateCount);
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to update customize route dayRouteMap because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRIP_ROUTE_ID, tripRouteId);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  @Override
  public ServiceResult<String> deleteDayRoute(String tripRouteId, String routeDay) {
    ServiceResult<String> result = new ServiceResult<String>();
    Map<String, Object> queryMap = new HashMap<String, Object>();
    queryMap.put(DataConstant.TRIP_ROUTE_ID, tripRouteId);
    queryMap.put(DataConstant.ROUTE_DAY, routeDay);

    Map<String, Object> updateMap = new HashMap<String, Object>();
    updateMap.put(DataConstant.STATUS, 0);

    int updateCount = tripPOIRouteDao.updatePOIRoute(queryMap, updateMap);
    logger.info("Delete TripPOIRoute objectId count:" + updateCount + " status=0(unusable)");
    if (updateCount == 0) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to delete trip POI route because ObjectId is null!");
      return result;
    }

    queryMap.put(DataConstant.STATUS, 0);
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(queryMap);
    result.setBusinessResult(jsonResult);
    return result;
  }


  public ServiceResult<String> createTravelUserPOI(TravelPOI travelUserPOI) {
    ServiceResult<String> result = new ServiceResult<String>();
    long currentTime = System.currentTimeMillis();
    travelUserPOI.setCreateTime(currentTime);
    travelUserPOI.setUpdateTime(currentTime);

    Object idObj = travelPOIDao.saveTravelPOI(travelUserPOI);
    logger.info("TravelPOI objectId:" + idObj);
    if (idObj == null) {
      result.setReturnCode(ReturnCode.SERVER_ERROR);
      result.setReturnMessage("Fail to create travel POI because ObjectId is null!");
      return result;
    }
    Map<String, Object> map = new HashMap<String, Object>();
    map.put(DataConstant.TRAVELPOID, idObj.toString());
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(map);
    result.setBusinessResult(jsonResult);
    return result;
  }

  @Override
  public ServiceResult<String> callbackResource(String resourceKey, String resourceURL) {
    // TODO Auto-generated method stub
    return null;
  }

  public void setTripProductDao(TripProductDao tripProductDao) {
    this.tripProductDao = tripProductDao;
  }

  public void setTripPOIRouteDao(TripPOIRouteDao tripPOIRouteDao) {
    this.tripPOIRouteDao = tripPOIRouteDao;
  }

  public void setCustomizeRouteDao(CustomizeRouteDao customizeRouteDao) {
    this.customizeRouteDao = customizeRouteDao;
  }

  public void setTravelPOIDao(TravelPOIDao travelPOIDao) {
    this.travelPOIDao = travelPOIDao;
  }


}
