package com.newroad.tripmaster.service.scenic;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.constant.JSONConvertor;
import com.newroad.tripmaster.dao.maria.MariaDao;
import com.newroad.tripmaster.dao.pojo.SimpleUser;
import com.newroad.tripmaster.dao.pojo.trip.TripCityDict;
import com.newroad.tripmaster.service.CommonServiceIf;
import com.newroad.util.apiresult.ServiceResult;
import com.newroad.util.http.HttpUtil;
import com.newroad.util.http.HttpUtil.Method;


public class CommonService implements CommonServiceIf {

  private static Logger logger = LoggerFactory.getLogger(CommonService.class);

  @Value("${USERSNS_HOST_URL}")
  private String accountHostURL;

  private static String USER_INFO_URL = "user/info";

  private static String LUCKER_INFO_URL = "user/luckerinfo";

  private static String USER_LIST_URL = "user/list";

  private MariaDao mariaDao;

  public SimpleUser getUserInfo(Long userId) {
    SimpleUser userInfo = null;
    String url = accountHostURL + USER_INFO_URL;
    Map<String, Object> requestMap = new HashMap<String, Object>(1);
    requestMap.put("userID", userId);
    String httpResult = null;
    try {
      StringBuffer sb = new StringBuffer();
      String reqEntity = JSONConvertor.getJSONInstance().writeValueAsString(requestMap);
      sb.append(reqEntity);
      StringBuffer result = HttpUtil.httpCall(Method.post, url, null, sb, null);
      httpResult = result.toString();
    } catch (Exception e) {
      logger.error("Fail to get user info", e);
    }
    if (httpResult != null && !"".equals(httpResult)) {
      userInfo = JSONConvertor.getJSONInstance().fromJson(httpResult, SimpleUser.class);
    }
    return userInfo;
  }

  public ServiceResult<String> getLuckerUserInfo(Long userId) {
    ServiceResult<String> serviceResult = new ServiceResult<String>();
    String url = accountHostURL + LUCKER_INFO_URL;
    Map<String, Object> requestMap = new HashMap<String, Object>(1);
    requestMap.put("userID", userId);
    String httpResult = null;
    try {
      StringBuffer sb = new StringBuffer();
      String reqEntity = JSONConvertor.getJSONInstance().writeValueAsString(requestMap);
      sb.append(reqEntity);
      StringBuffer result = HttpUtil.httpCall(Method.post, url, null, sb, null);
      httpResult = result.toString();
    } catch (Exception e) {
      logger.error("Fail to get lucker user info", e);
    }
    serviceResult.setBusinessResult(httpResult);
    return serviceResult;
  }

  public String listSimpleUsers(Integer userRole, Integer start, Integer size) {
    String url = accountHostURL + USER_LIST_URL;
    Map<String, Object> requestMap = new HashMap<String, Object>(1);
    requestMap.put("page", start);
    requestMap.put("size", size);
    requestMap.put("userRole", userRole);
    String httpResult = null;
    try {
      StringBuffer sb = new StringBuffer();
      String reqEntity = JSONConvertor.getJSONInstance().writeValueAsString(requestMap);
      sb.append(reqEntity);
      StringBuffer result = HttpUtil.httpCall(Method.post, url, null, sb, null);
      httpResult = result.toString();
    } catch (Exception e) {
      logger.error("Fail to get lucker user info", e);
    }
    return httpResult;
  }


  public ServiceResult<String> listCities(String parentCode, Integer cityLevel) {
    ServiceResult<String> serviceResult = new ServiceResult<String>();
    Map<String, Object> queryMap = new HashMap<String, Object>();
    queryMap.put(DataConstant.PARENT_CODE, parentCode);
    queryMap.put(DataConstant.CITY_LEVEL, cityLevel);
    List<TripCityDict> resultList = null;
    switch (cityLevel) {
      case 1:
        resultList = mariaDao.selectList("city.findCityByCity2", queryMap);
        break;
      case 2:
        resultList = mariaDao.selectList("city.findCityByCountry", queryMap);
        break;
    }
    String jsonResult = JSONConvertor.getJSONInstance().writeValueAsString(resultList);
    serviceResult.setBusinessResult(jsonResult);
    return serviceResult;
  }

  public void setMariaDao(MariaDao mariaDao) {
    this.mariaDao = mariaDao;
  }


}
