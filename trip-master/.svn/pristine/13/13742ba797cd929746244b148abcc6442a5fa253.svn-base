package com.newroad.tripmaster.dao;

import java.util.List;

import org.bson.types.ObjectId;
import org.mongodb.morphia.Datastore;
import org.mongodb.morphia.Key;
import org.mongodb.morphia.dao.BasicDAO;
import org.mongodb.morphia.query.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.dao.pojo.Tips;


public class TipsDao extends BasicDAO<Tips, ObjectId>{

  private static Logger logger = LoggerFactory.getLogger(TipsDao.class);

  private static Integer QUERY_LIMIT = 100;

  protected TipsDao(Datastore dataStore) {
    super(dataStore);
  }

  public Object saveTips(Tips tips) {
    Key<Tips> key = getDs().save(tips);
    return key.getId();
  }

  public List<Tips> getUserTips(Long userid,String hashsiteid){
    Query<Tips> tipsQueryArray =
        getDs().find(Tips.class).field(DataConstant.USERID).equal(userid).order("-lastupdatedtime").limit(QUERY_LIMIT);
    if(hashsiteid!=null){
      tipsQueryArray.field(DataConstant.HASH_SITE_ID).equal(hashsiteid);
    }
    List<Tips> tipsList = tipsQueryArray.asList();
    logger.info("User Tips:"+tipsList);
    return tipsList;
  }
  
  public List<Tips> listScenicTips(String hashsiteid) {
    Query<Tips> tipsQueryArray =
        getDs().find(Tips.class).field(DataConstant.HASH_SITE_ID).equal(hashsiteid).order("-lastupdatedtime").limit(QUERY_LIMIT);
    List<Tips> tipsList = tipsQueryArray.asList();
    logger.info("Scenic Tips:"+tipsList);
    return tipsList;
  }
}
