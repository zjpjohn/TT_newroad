package com.newroad.tripmaster.controller;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newroad.tripmaster.constant.HttpConstant;
import com.newroad.tripmaster.constant.JSONConvertor;
import com.newroad.tripmaster.dao.pojo.trip.CustomizeRoute;
import com.newroad.tripmaster.dao.pojo.trip.POIRoute;
import com.newroad.tripmaster.dao.pojo.trip.TravelPOI;
import com.newroad.tripmaster.dao.pojo.trip.TripProduct;
import com.newroad.tripmaster.service.ProductDesignServiceIf;
import com.newroad.util.StringHelper;
import com.newroad.util.apiresult.ApiReturnObjectUtil;

@Controller
@RequestMapping("/v{apiVersion}/design")
public class ProductDesignController {

  private static Logger logger = LoggerFactory.getLogger(ProductDesignController.class);

  @Autowired
  private ProductDesignServiceIf productDesignService;

  /**
   * save designed trip product
   */
  @RequestMapping(value = "/product", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String saveTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    TripProduct tripProduct = JSONConvertor.getJSONInstance().fromJson(reqParam, TripProduct.class);
    return productDesignService.saveTripProduct(tripProduct).toString();
  }
  
  /**
   * save designed trip route
   */
  @RequestMapping(value = "/route", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String saveTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    CustomizeRoute tripRoute = JSONConvertor.getJSONInstance().fromJson(reqParam, CustomizeRoute.class);
    return productDesignService.saveCustomizeRoute(tripRoute).toString();
  }
  
  
  /**
   * save designed trip poi route
   */
  @RequestMapping(value = "/poiroute", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String saveTripDayRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    POIRoute poiRoute = JSONConvertor.getJSONInstance().fromJson(reqParam, POIRoute.class);
    return productDesignService.saveTripPOIRoute(poiRoute).toString();
  }
  
  /**
   * save designed trip product
   */
  @RequestMapping(value = "/travelpoi", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String saveTravelPOI(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn401().toString();
    }
    TravelPOI travelPOI = JSONConvertor.getJSONInstance().fromJson(reqParam, TravelPOI.class);
    return productDesignService.saveTravelUserPOI(travelPOI).toString();
  }
}
