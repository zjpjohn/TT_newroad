package com.newroad.tripmaster.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.constant.HttpConstant;
import com.newroad.tripmaster.constant.JSONConvertor;
import com.newroad.tripmaster.dao.pojo.trip.POIRoute;
import com.newroad.tripmaster.dao.pojo.trip.TravelPOI;
import com.newroad.tripmaster.dao.pojo.trip.TripProduct;
import com.newroad.tripmaster.filter.TokenAuthFilter;
import com.newroad.tripmaster.service.ProductDesignServiceIf;
import com.newroad.util.StringHelper;
import com.newroad.util.apiresult.ApiReturnObjectUtil;

@Controller
@RequestMapping("/v{apiVersion}/design")
public class ProductDesignController {

  private static Logger logger = LoggerFactory.getLogger(ProductDesignController.class);

  @Autowired
  private ProductDesignServiceIf productDesignService;

  /**
   * save designed trip product
   */
  @RequestMapping(value = "/product/create", method = RequestMethod.POST, produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String createTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    TripProduct tripProduct = JSONConvertor.getJSONInstance().fromJson(reqParam, TripProduct.class);
    Long luckerId = tripProduct.getLuckerId();
    if (luckerId == null) {
      luckerId = TokenAuthFilter.getCurrentUser();
      tripProduct.setLuckerId(luckerId);
    }
    if (tripProduct.getLuckerId() == 0) {
      return ApiReturnObjectUtil.getReturn400("Bad request params for userId!").toString();
    }
    return productDesignService.createTripProduct(tripProduct).toString();
  }

  /**
   * update designed trip product
   */
  @RequestMapping(value = "/product/update", method = RequestMethod.POST, produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }

    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    if (tripProductId == null || "".equals(tripProductId)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    map.remove(DataConstant.TRIP_PRODUCT_ID);
    return productDesignService.updateTripProduct(tripProductId, map).toString();
  }

  /**
   * delete designed trip product
   */
  @RequestMapping(value = "/product/delete", method = RequestMethod.POST, produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String deleteTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    if (tripProductId == null || "".equals(tripProductId)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    return productDesignService.deleteTripProduct(tripProductId).toString();
  }

  /**
   * submit designed trip product
   */
  @RequestMapping(value = "/product/submit", method = RequestMethod.POST, produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String submitTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    if (tripProductId == null || "".equals(tripProductId)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    Integer status = (Integer) map.get(DataConstant.STATUS);
    return productDesignService.updateTripProductStatus(tripProductId, status).toString();
  }

  // /**
  // * trip product list by user
  // */
  // @RequestMapping(value = "/product/detail", produces = HttpConstant.CONTENT_TYPE_JSON)
  // public @ResponseBody
  // String detailUserTripProduct(HttpServletRequest request, @PathVariable String apiVersion)
  // throws Exception {
  // String reqParam = StringHelper.getRequestEntityString(request);
  // if (reqParam.indexOf("error") >= 0) {
  // return ApiReturnObjectUtil.getReturn401().toString();
  // }
  // @SuppressWarnings("unchecked")
  // Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
  // String tripProductId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
  // return productDesignService.detailUserTripProduct(tripProductId).toString();
  // }

  /**
   * trip product list by user
   */
  @RequestMapping(value = "/product/list/{start}/{size}", method = RequestMethod.POST, produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String listUserTripProduct(HttpServletRequest request, @PathVariable Integer start, @PathVariable Integer size,
      @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    if (start == null || size == null) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }

    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    Long lucker = null;
    Integer luckerId = (Integer) map.get(DataConstant.LUCKER_ID);
    if (luckerId == null) {
      Long userId = TokenAuthFilter.getCurrentUser();
      if (userId == null || userId == 0L) {
        return ApiReturnObjectUtil.getReturn400().toString();
      }
    } else {
      lucker = luckerId.longValue();
    }
    return productDesignService.listUserTripProduct(lucker, start, size).toString();
  }

  /**
   * trip product list by user
   */
  @RequestMapping(value = "/route/list", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String listUserTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    Long userId = TokenAuthFilter.getCurrentUser();
    if (userId == null || userId == 0L) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    return productDesignService.listUserTripRoute(userId).toString();
  }

  // /**
  // * create designed trip route
  // */
  // @RequestMapping(value = "/route/create", produces = HttpConstant.CONTENT_TYPE_JSON)
  // public @ResponseBody
  // String createTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws
  // Exception {
  // String reqParam = StringHelper.getRequestEntityString(request);
  // if (reqParam.indexOf("error") >= 0) {
  // return ApiReturnObjectUtil.getReturn401().toString();
  // }
  // CustomizeRoute tripRoute = JSONConvertor.getJSONInstance().fromJson(reqParam,
  // CustomizeRoute.class);
  // return productDesignService.createCustomizeRoute(tripRoute).toString();
  // }

  /**
   * update designed trip route
   */
  @RequestMapping(value = "/route/update", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
    if (tripRouteId == null || "".equals(tripRouteId)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    map.remove(DataConstant.TRIP_ROUTE_ID);
    return productDesignService.updateCustomizeRoute(tripRouteId, map).toString();
  }

  /**
   * update designed day trip route
   */
  @RequestMapping(value = "/dayroute/updateinfo", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateDayTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
    String routeDayTitle = (String) map.get(DataConstant.DAY_ROUTE_INFO);
    if (tripRouteId == null || "".equals(tripRouteId) || routeDayTitle == null || "".equals(routeDayTitle)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    map.remove(DataConstant.TRIP_ROUTE_ID);
    String[] routeDays = routeDayTitle.split(":");
    return productDesignService.updateDayRouteInfo(tripRouteId, routeDays[0], routeDays[1]).toString();
  }

  /**
   * delete designed day trip route
   */
  @RequestMapping(value = "/dayroute/delete", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String deleteDayTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
    String routeDay = (String) map.get(DataConstant.ROUTE_DAY);
    if (tripRouteId == null || "".equals(tripRouteId) || routeDay == null || "".equals(routeDay)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    map.remove(DataConstant.TRIP_ROUTE_ID);
    return productDesignService.deleteDayRoute(tripRouteId, routeDay).toString();
  }

  /**
   * delete designed trip route
   */
  @RequestMapping(value = "/route/delete", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String deleteTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
    if (tripRouteId == null || "".equals(tripRouteId)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    return productDesignService.deleteCustomizeRoute(tripRouteId).toString();
  }

  // /**
  // * trip product list by user
  // */
  // @RequestMapping(value = "/route/detail", produces = HttpConstant.CONTENT_TYPE_JSON)
  // public @ResponseBody
  // String detailUserTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws
  // Exception {
  // String reqParam = StringHelper.getRequestEntityString(request);
  // if (reqParam.indexOf("error") >= 0) {
  // return ApiReturnObjectUtil.getReturn401().toString();
  // }
  // @SuppressWarnings("unchecked")
  // Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
  // String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
  // return productDesignService.detailCustomizeRoute(tripRouteId).toString();
  // }



  // /**
  // * trip product list by user
  // */
  // @RequestMapping(value = "/dayRoute/detail", produces = HttpConstant.CONTENT_TYPE_JSON)
  // public @ResponseBody
  // String detailTripDayRoute(HttpServletRequest request, @PathVariable String apiVersion) throws
  // Exception {
  // String reqParam = StringHelper.getRequestEntityString(request);
  // if (reqParam.indexOf("error") >= 0) {
  // return ApiReturnObjectUtil.getReturn401().toString();
  // }
  // @SuppressWarnings("unchecked")
  // Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
  // String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
  // String routeDay = (String) map.get(DataConstant.ROUTE_DAY);
  // return productDesignService.detailCustomizeDayRoute(tripRouteId, routeDay).toString();
  // }


  /**
   * create designed trip poi route
   */
  @RequestMapping(value = "/poiroute/create", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String createTripPOIRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    POIRoute poiRoute = JSONConvertor.getJSONInstance().fromJson(reqParam, POIRoute.class);
    return productDesignService.createTripPOIRoute(poiRoute).toString();
  }

  /**
   * update designed trip poi route
   */
  @RequestMapping(value = "/poiroute/update", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String updateTripPOIRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String poiRouteId = (String) map.get(DataConstant.POI_ROUTE_ID);
    if (poiRouteId == null || "".equals(poiRouteId)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    map.remove(DataConstant.POI_ROUTE_ID);
    return productDesignService.updateTripPOIRoute(poiRouteId, map).toString();
  }

  /**
   * delete designed trip poi route
   */
  @RequestMapping(value = "/poiroute/delete", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String deleteTripPOIRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String poiRouteId = (String) map.get(DataConstant.POI_ROUTE_ID);
    if (poiRouteId == null || "".equals(poiRouteId)) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    return productDesignService.deleteTripPOIRoute(poiRouteId).toString();
  }


  /**
   * add travel poi
   */
  @RequestMapping(value = "/travelpoi/add", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String addTravelPOI(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    TravelPOI travelPOI = JSONConvertor.getJSONInstance().fromJson(reqParam, TravelPOI.class);
    return productDesignService.createTravelUserPOI(travelPOI).toString();
  }

  /**
   * save new callback resource info
   */
  @RequestMapping(value = "/resource/callback", method = RequestMethod.POST, produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String callbackResource(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    if (reqParam.indexOf("error") >= 0) {
      return ApiReturnObjectUtil.getReturn400().toString();
    }
    @SuppressWarnings("unchecked")
    Map<String, Object> requestMap = JSONConvertor.getJSONInstance().fromJson(reqParam, Map.class);
    String resourceKey = (String) requestMap.get("resourceKey");
    String resourceURL = (String) requestMap.get("resourceURL");
    return productDesignService.callbackResource(resourceKey, resourceURL).toString();
  }
}
