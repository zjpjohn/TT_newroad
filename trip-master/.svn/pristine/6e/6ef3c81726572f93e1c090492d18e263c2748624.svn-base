package com.newroad.tripmaster.dao;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.bson.types.ObjectId;
import org.mongodb.morphia.Datastore;
import org.mongodb.morphia.Key;
import org.mongodb.morphia.dao.BasicDAO;
import org.mongodb.morphia.mapping.Mapper;
import org.mongodb.morphia.query.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mongodb.AggregationOutput;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.ReadPreference;
import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.dao.pojo.trip.POIRoute;
import com.newroad.tripmaster.dao.pojo.trip.TravelDayPOIComparator;
import com.newroad.tripmaster.dao.pojo.trip.TripDayRoute;
import com.newroad.tripmaster.util.BeanDBObjectUtils;

public class TripPOIRouteDao extends BasicDAO<POIRoute, ObjectId> {

  private static Logger logger = LoggerFactory.getLogger(TripPOIRouteDao.class);

  protected TripPOIRouteDao(Datastore ds) {
    super(ds);
    // TODO Auto-generated constructor stub
  }

  public Object saveTripPOIRoute(POIRoute poiRoute) {
    Key<POIRoute> key = getDs().save(poiRoute);
    return key.getId();
  }

  public POIRoute getTripPOIRoute(String poiRouteId) {
    ObjectId objId = new ObjectId(poiRouteId);
    Query<POIRoute> poiRouteQuery = getDs().find(POIRoute.class).field(Mapper.ID_KEY).equal(objId);
    POIRoute poiRoute = poiRouteQuery.get();
    return poiRoute;
  }

  public TripDayRoute getTripDayRoute(String userRouteId, String roundDay) {
    TripDayRoute dayRoute = null;
    Query<POIRoute> poiRouteQuery =
        getDs().find(POIRoute.class).field(DataConstant.USER_ROUTE_ID).equal(userRouteId).field(DataConstant.ROUTE_DAY).equal(roundDay);
    List<POIRoute> poiRouteList = poiRouteQuery.asList();
    if (poiRouteList != null && poiRouteList.size() > 0) {
      dayRoute = new TripDayRoute(userRouteId, poiRouteList);
    }
    return dayRoute;
  }

  public List<POIRoute> aggregateTripDayPOI(String tripRouteId) {
    DBCollection collection = getDs().getCollection(POIRoute.class);
    List<DBObject> dbObjectList = new ArrayList<DBObject>();
    DBObject fields = new BasicDBObject(DataConstant.TRIP_ROUTE_ID, tripRouteId);
    fields.put("travelPOI.travelPOIId", new BasicDBObject("$exists", 1));
    DBObject match = new BasicDBObject("$match", fields);
    dbObjectList.add(match);

    DBObject fields2 = new BasicDBObject("travelPOI.travelPOIId", 1);
    fields2.put("travelPOI.poiName", 1);
    fields2.put("routeDay", 1);
    DBObject project = new BasicDBObject("$project", fields2);
    dbObjectList.add(project);

    ReadPreference preference = ReadPreference.secondaryPreferred();
    collection.setReadPreference(preference);

    AggregationOutput aggregate = collection.aggregate(dbObjectList);

    List<POIRoute> list=new ArrayList<POIRoute>();
    Iterable<DBObject> iter= aggregate.results();
    Iterator<DBObject> iterator=iter.iterator();
    while(iterator.hasNext()){
      DBObject obj=iterator.next();
      POIRoute poiRoute=new POIRoute();
      BeanDBObjectUtils.dbObject2Bean(obj, poiRoute);
      list.add(poiRoute);
    }
    Collections.sort(list, new TravelDayPOIComparator());
    return list;
  }

}
