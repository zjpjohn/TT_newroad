package com.newroad.tripmaster.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newroad.tripmaster.constant.DataConstant;
import com.newroad.tripmaster.constant.HttpConstant;
import com.newroad.tripmaster.constant.JSONConvertor;
import com.newroad.tripmaster.filter.TokenAuthFilter;
import com.newroad.tripmaster.service.VoyagerServiceIf;
import com.newroad.util.StringHelper;

@Controller
@RequestMapping("/v{apiVersion}/voyager")
public class VoyagerController {

  private static Logger logger = LoggerFactory.getLogger(VoyagerController.class);

  @Autowired
  private VoyagerServiceIf voyagerService;

  /**
   * list trip product
   */
  @RequestMapping(value = "/list", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String listTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    Integer cityCode = (Integer) map.get(DataConstant.CITY_CODE);
    logger.debug("listTripProduct cityCode:" + cityCode);
    return voyagerService.listTripProduct(cityCode).toString();
  }

  /**
   * detail trip product
   */
  @RequestMapping(value = "/product", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String detailTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String productId = (String) map.get(DataConstant.TRIP_PRODUCT_ID);
    if(productId==null){
      return null;
    }
    return voyagerService.detailTripProduct(productId).toString();
  }

  /**
   * detail trip product by user
   */
  @RequestMapping(value = "/userproduct", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String detailUserTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    Long luckerId = (Long) map.get(DataConstant.LUCKER_ID);
    return voyagerService.listUserTripProducts(luckerId).toString();
  }
  
  /**
   * customize route
   */
  @RequestMapping(value = "/route", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String customizeTripRoute(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    String reqParam = StringHelper.getRequestEntityString(request);
    @SuppressWarnings("unchecked")
    Map<String, Object> map = JSONConvertor.getJSONInstance().readValue(reqParam, Map.class);
    String tripRouteId = (String) map.get(DataConstant.TRIP_ROUTE_ID);
    return voyagerService.detailCustomizeRoute(tripRouteId).toString();
  }

  /**
   * recommend
   */
  @RequestMapping(value = "/recommend", produces = HttpConstant.CONTENT_TYPE_JSON)
  public @ResponseBody
  String recommendTripProduct(HttpServletRequest request, @PathVariable String apiVersion) throws Exception {
    Long userId = TokenAuthFilter.getCurrentUser();
    return voyagerService.recommendTripProduct(userId).toString();
  }

}
